public void moveEntityWithHeading(float strafe, float forward) {
	Entity entity = this.getPassengers().isEmpty() ? null : (Entity) this.getPassengers().get(0);

	if (this.isBeingRidden() && this.canBeSteered()) {
		this.rotationYaw = entity.rotationYaw;
		this.prevRotationYaw = this.rotationYaw;
		this.rotationPitch = entity.rotationPitch * 0.5F;
		this.setRotation(this.rotationYaw, this.rotationPitch);
		this.renderYawOffset = this.rotationYaw;
		this.rotationYawHead = this.rotationYaw;
		this.stepHeight = 1.0F;
		this.jumpMovementFactor = this.getAIMoveSpeed() * 0.1F;

		if (this.canPassengerSteer()) {
			float f = (float) this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).getAttributeValue() * 0.225F;
			this.setAIMoveSpeed(f);
			super.moveEntityWithHeading(0.0F, 1.0F);
		} else {
			this.motionX = 0.0D;
			this.motionY = 0.0D;
			this.motionZ = 0.0D;
		}

		this.prevLimbSwingAmount = this.limbSwingAmount;
		double d1 = this.posX - this.prevPosX;
		double d0 = this.posZ - this.prevPosZ;
		float f1 = MathHelper.sqrt(d1 * d1 + d0 * d0) * 4.0F;

		if (f1 > 1.0F) {
			f1 = 1.0F;
		}

		this.limbSwingAmount += (f1 - this.limbSwingAmount) * 0.4F;
		this.limbSwing += this.limbSwingAmount;
	} else {
		this.stepHeight = 0.5F;
		this.jumpMovementFactor = 0.02F;
		super.moveEntityWithHeading(strafe, forward);
	}
}