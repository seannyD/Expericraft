import net.minecraftforge.fml.client.*;
import net.minecraftforge.fml.client.registry.*;
import net.minecraftforge.fml.common.*;
import net.minecraftforge.fml.common.asm.*;
import net.minecraftforge.fml.common.asm.transformers.*;
import net.minecraftforge.fml.common.discovery.*;
import net.minecraftforge.fml.common.discovery.asm.*;
import net.minecraftforge.fml.common.event.*;
import net.minecraftforge.fml.common.functions.*;
import net.minecraftforge.fml.common.network.*;
import net.minecraftforge.fml.common.registry.*;
import net.minecraftforge.fml.common.toposort.*;
import net.minecraftforge.fml.common.versioning.*;
import net.minecraftforge.fml.relauncher.*;
import net.minecraftforge.fml.server.*;
import net.minecraft.block.*;
import net.minecraft.block.material.*;
import net.minecraft.client.*;
import net.minecraft.client.audio.*;
import net.minecraft.client.entity.*;
import net.minecraft.client.gui.*;
import net.minecraft.client.gui.achievement.*;
import net.minecraft.client.gui.inventory.*;
import net.minecraft.client.model.*;
import net.minecraft.client.multiplayer.*;
import net.minecraft.client.particle.*;
import net.minecraft.client.renderer.*;
import net.minecraft.client.renderer.culling.*;
import net.minecraft.client.renderer.entity.*;
import net.minecraft.client.renderer.tileentity.*;
import net.minecraft.client.settings.*;
import net.minecraft.command.*;
import net.minecraft.crash.*;
import net.minecraft.creativetab.*;
import net.minecraft.dispenser.*;
import net.minecraft.enchantment.*;
import net.minecraft.entity.*;
import net.minecraft.entity.ai.*;
import net.minecraft.entity.boss.*;
import net.minecraft.entity.effect.*;
import net.minecraft.entity.item.*;
import net.minecraft.entity.monster.*;
import net.minecraft.entity.passive.*;
import net.minecraft.entity.player.*;
import net.minecraft.entity.projectile.*;
import net.minecraft.inventory.*;
import net.minecraft.item.*;
import net.minecraft.item.crafting.*;
import net.minecraft.nbt.*;
import net.minecraft.network.*;
import net.minecraft.network.rcon.*;
import net.minecraft.pathfinding.*;
import net.minecraft.potion.*;
import net.minecraft.profiler.*;
import net.minecraft.server.*;
import net.minecraft.server.dedicated.*;
import net.minecraft.server.gui.*;
import net.minecraft.server.integrated.*;
import net.minecraft.server.management.*;

import net.minecraft.stats.*;
import net.minecraft.tileentity.*;
import net.minecraft.util.*;
import net.minecraft.village.*;
import net.minecraft.world.*;
import net.minecraft.world.biome.*;
import net.minecraft.world.chunk.*;
import net.minecraft.world.chunk.storage.*;
import net.minecraft.world.demo.*;
import net.minecraft.world.gen.*;
import net.minecraft.world.gen.feature.*;
import net.minecraft.world.gen.layer.*;
import net.minecraft.world.gen.structure.*;
import net.minecraft.world.storage.*;
import net.minecraftforge.classloading.*;
import net.minecraftforge.client.*;
import net.minecraftforge.client.event.*;
import net.minecraftforge.client.event.sound.*;
import net.minecraftforge.common.*;
import net.minecraftforge.event.*;
import net.minecraftforge.event.entity.*;
import net.minecraftforge.event.entity.item.*;
import net.minecraftforge.event.entity.living.*;
import net.minecraftforge.event.entity.minecart.*;
import net.minecraftforge.event.entity.player.*;
import net.minecraftforge.event.terraingen.*;
import net.minecraftforge.event.world.*;
import net.minecraftforge.oredict.*;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL12;
import net.minecraft.init.*;
import java.util.*;

import net.minecraft.block.state.*;
import net.minecraft.util.math.*;
import net.minecraft.client.renderer.block.model.*;

public class mcreator_%name% {

public mcreator_%name%(){}

public static Item block;
public static Object instance;

public void load(FMLInitializationEvent event){
if(event.getSide() == Side.CLIENT){
	Minecraft.getMinecraft().getRenderItem().getItemModelMesher().register(block, 0, new ModelResourceLocation("%MAINMODNAME%:%name%", "inventory"));
}
%recepti%
}

@SideOnly(Side.CLIENT)
public void registerRenderers(){
	%rtp%
}
public void generateNether(World world, Random random, int chunkX, int chunkZ){}
public void generateSurface(World world, Random random, int chunkX, int chunkZ){}
public int addFuel(ItemStack fuel){
	return 0;
}
public void serverLoad(FMLServerStartingEvent event){}
public void preInit(FMLPreInitializationEvent event){
	int entityID = MathHelper.getRandomUUID().hashCode();
	EntityRegistry.registerModEntity(new ResourceLocation("%MAINMODNAME%:entitybullet%name%"),EntityArrowCustom.class, "entitybullet%name%", entityID, instance, 64, 1, true);
}

static{
block = (new ItemgGUN());
}

static class ItemgGUN extends Item{

public ItemgGUN(){
super();
setMaxDamage(%maxd%);
maxStackSize = 1;
setFull3D();
setUnlocalizedName("%name%");
setRegistryName("%name%");
GameRegistry.register(this);
setCreativeTab(%tab%);
}

@Override
public int getMaxItemUseDuration(ItemStack par1ItemStack)
    {
        return 72000;
    }

	@Override
	public ActionResult<ItemStack> onItemRightClick(World par2World, final EntityPlayer par3EntityPlayer, EnumHand hand) {

		%gpos%
	
		ItemStack par1ItemStack = par3EntityPlayer.getHeldItem(hand);
	
        boolean flag = par3EntityPlayer.capabilities.isCreativeMode || EnchantmentHelper.getEnchantmentLevel(Enchantments.INFINITY, par1ItemStack) > 0;

        if (flag || par3EntityPlayer.inventory.hasItemStack(%item%))
        {
            float f = %speed%F;

            EntityArrowCustom entityarrow = new EntityArrowCustom(par2World, par3EntityPlayer);
				
				entityarrow.setThrowableHeading(par3EntityPlayer.getLookVec().xCoord,par3EntityPlayer.getLookVec().yCoord,par3EntityPlayer.getLookVec().zCoord,f * 2.0F,0);
                entityarrow.setIsCritical(%iscrit%);
                entityarrow.setDamage(%damage%);
                entityarrow.setKnockbackStrength(%knock%);

                if(%fire%){
                	entityarrow.setFire(100);
				}

            	par1ItemStack.damageItem(1, par3EntityPlayer);
				int i = (int)par3EntityPlayer.posX;
				int j = (int)par3EntityPlayer.posY;
				int k = (int)par3EntityPlayer.posZ;
				par2World.playSound((EntityPlayer)null,(double)i + 0.5D, (double)j + 0.5D, (double)k + 0.5D, (net.minecraft.util.SoundEvent)net.minecraft.util.SoundEvent.REGISTRY.getObject(new ResourceLocation(("%sound%"))), SoundCategory.NEUTRAL, 1.0F, 1.0F / (itemRand.nextFloat() * 0.4F + 1.2F) + f * 0.5F);

            if (flag)
            {
                entityarrow.pickupStatus = EntityArrow.PickupStatus.CREATIVE_ONLY;
            }
            else
            {
				par3EntityPlayer.inventory.clearMatchingItems(%item%.getItem(),-1,1,null);
            }

            if (!par2World.isRemote)
            {
                par2World.spawnEntity(entityarrow);
            }
            World world = par2World;
            EntityPlayer entity = par3EntityPlayer;
            %shoot%
        }

        return new ActionResult(EnumActionResult.SUCCESS, par1ItemStack);
    }

    @Override
    public EnumAction getItemUseAction(ItemStack par1ItemStack)
    {
        return EnumAction.BOW;
    }

}

	public static class EntityArrowCustom extends EntityTippedArrow{
		public EntityArrowCustom(World a){
			super(a);
		}
		public EntityArrowCustom(World worldIn, double x, double y, double z){
			super(worldIn,x,y,z);
		}
		public EntityArrowCustom(World worldIn, EntityLivingBase shooter){
			super(worldIn,shooter);
		}
		
		@Override
		public void onCollideWithPlayer(EntityPlayer entity){
			super.onCollideWithPlayer(entity);
			int i = MathHelper.floor(this.getEntityBoundingBox().minX + 0.001D);
			int j = MathHelper.floor(this.getEntityBoundingBox().minY + 0.001D);
			int k = MathHelper.floor(this.getEntityBoundingBox().minZ + 0.001D);
			World world = this.world;
			%pcollide%
		}
		@Override
        public void onUpdate(){
		     super.onUpdate();
		     int i = MathHelper.floor(this.getEntityBoundingBox().minX + 0.001D);
		     int j = MathHelper.floor(this.getEntityBoundingBox().minY + 0.001D);
		     int k = MathHelper.floor(this.getEntityBoundingBox().minZ + 0.001D);
		     World world = this.world;
		     Entity entity = (Entity)shootingEntity;
		     %tick%
		     if (getBlock(this.world, i, j, k) != Blocks.AIR || getBlock(this.world, i, j-1, k) != Blocks.AIR ||
		     getBlock(this.world, i, j+1, k) != Blocks.AIR ||
		     getBlock(this.world, i+1, j, k) != Blocks.AIR || getBlock(this.world, i-1, j, k) != Blocks.AIR
		     || getBlock(this.world, i, j, k+1) != Blocks.AIR || getBlock(this.world, i, j, k-1) != Blocks.AIR){
		       	%bcollide%
		       	this.kill();
		     }

        }
		
		public Block getBlock(World par1World, int i, int j, int k){
			return par1World.getBlockState(new BlockPos(i, j, k)).getBlock();
		}
		
	}
	
	%modelrender%



}
