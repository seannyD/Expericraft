static class Item%name% extends Item
{

    //harvest level
	int harvest = %harvest%;

    protected float efficiencyOnProperMaterial;

    protected Item%name%()
    {
        efficiencyOnProperMaterial = %ucinkovitost%;
        setMaxDamage(%uses%);
        setMaxStackSize(1);
        this.setCreativeTab(CreativeTabs.TOOLS);
    }
	
	@Override
	public Multimap<String, AttributeModifier> getItemAttributeModifiers(EntityEquipmentSlot equipmentSlot)
    {
        Multimap<String, AttributeModifier> multimap = super.getItemAttributeModifiers(equipmentSlot);

        if (equipmentSlot == EntityEquipmentSlot.MAINHAND)
        {
            multimap.put(SharedMonsterAttributes.ATTACK_DAMAGE.getName(), new AttributeModifier(ATTACK_DAMAGE_MODIFIER, "Tool modifier", %enemy%, 0));
        }

        return multimap;
    }

	@Override
    public boolean canHarvestBlock(IBlockState blockIn)
    {
	        return true;
    }

    @Override
    public float getStrVsBlock(ItemStack par1ItemStack, IBlockState par2Block) {
        return efficiencyOnProperMaterial;
    }

    @Override
    public boolean hitEntity(ItemStack par1ItemStack, EntityLivingBase par2EntityLiving, EntityLivingBase par3EntityLiving)
    {
        par1ItemStack.damageItem(1, par3EntityLiving);
        return true;
    }

    public boolean onBlockDestroyed(ItemStack par1ItemStack, World par2World, Block par3, int par4, int par5, int par6, EntityLivingBase par7EntityLiving){
		    par1ItemStack.damageItem(1, par7EntityLiving);
		    return true;
	}

    @Override
    public boolean isFull3D()
    {
        return true;
    }

    %txf%

    @Override
    public int getItemEnchantability()
    {
		//kok se lohk cara
        return %enta%;
    }
}
